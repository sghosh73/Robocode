#pragma config(Hubs,  S4, HTMotor,  HTServo,  HTMotor,  HTMotor)
#pragma config(Sensor, S4,     ,               sensorI2CMuxController)
#pragma config(Motor,  motorB,          spinnerA,      tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorC,          spinnerB,      tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S4_C1_1,     lift,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C1_2,     motorE,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C3_1,     front_right,   tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C3_2,     front_left,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C4_1,     back_right,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C4_2,     back_left,     tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S4_C2_1,    hook,                 tServoStandard)
#pragma config(Servo,  srvo_S4_C2_2,    hook,                 tServoStandard)
#pragma config(Servo,  srvo_S4_C2_3,    spinner1,             tServoContinuousRotation)
#pragma config(Servo,  srvo_S4_C2_4,    spinner2,             tServoContinuousRotation)
#pragma config(Servo,  srvo_S4_C2_5,    door,                 tServoStandard)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#ifndef TASKS_H
#define TASKS_H

#define LIFT_HEIGHT 0
#define DOOR_UP 0
#define DOOR_DOWN 0
#define TILE_LENGTH 0

void driveForward(int speed, int tiles)
{
	nMotorEncoder[right] = 0;
	nMotorEncoder[left] = 0;

	nMotorEncoderTarget[right] = distance;
	nMotorEncoderTarget[left] = distance;

	motor[left] = -speed;
	motor[right] = speed;

	while (nMotorStaRunState[left] != runStateIdle) {}

	motor[left] = 0;
	motor[right] = 0;
}


void driveBackward(int speed, int tiles)
{
	nMotorEncoder[right] = 0;
	nMotorEncoder[left] = 0;

	nMotorEncoderTarget[right] = TILE_LENGTH * tiles;
	nMotorEncoderTarget[left] = TILE_LENGTH * tiles;

	motor[left] = speed;
	motor[right] = -speed;

	while (nMotorStaRunState[left] != runStateIdle) {}

	motor[left] = 0;
	motor[right] = 0;
}

void turnRight(int speed, int tiles)
{
	nMotorEncoder[right] = 0;

	nMotorEncoderTarget[right] = TILE_LENGTH * tiles;

	motor[right] = speed;

	while (nMotorStaRunState[right] != runStateIdle) {}

	motor[right] = 0;
	wait1Msec(10);
}

void turnLeft(int speed, int tiles)
{
	nMotorEncoder[left] = 0;

	nMotorEncoderTarget[left] = TILE_LENGTH * tiles;

	motor[left] = speed;

	while (nMotorStaRunState[left] != runStateIdle) {}

	motor[right] = 0;
	wait1Msec(10);
}

void point_turn(int speed, int tiles)
{
	nMotorEncoder[left] = 0;
	nMotorEncoder[right] = 0;

	nMotorEncoderTarget[right] = TILE_LENGTH * tiles;
	nMotorEncoderTarget[left] = TILE_LENGTH * tiles;

	motor[left] = speed;
	motor[right] = -speed;

	while (nMotorStaRunState[left] != runStateIdle) {}

	motor[left] = 0;
	motor[right] = 0;

	wait1Msec(10);
}


void raiseLift()
{
	nMotorEncoder[lift] = 0;
	nMotorEncoderTarget = LIFT_HEIGHT
	motor[lift] = 50;
	while (nMotorStaRunState[lift] != runStateIdle) {}
	motor[lift] = 0;
}

void depositBall()
{
	servo[door] = DOOR_DOWN;
	wait1Msec(1000);
	servo[door] = DOOR_UP;
}

#endif
